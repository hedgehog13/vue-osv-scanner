
import type { VulnerabilityResult } from "@/services/osvService";

export function useVulnerabilityDetails(props: { vulnerability: VulnerabilityResult }) {

  const mapCvssToSeverity = (score: string) => {
    // Extract numeric part from CVSS score, e.g., "3.1" from "CVSS:3.1/AV:N/AC:H/..."
    const scoreMatch = score.match(/^CVSS:(\d\.\d)/); // Match pattern "CVSS:x.x"

    if (scoreMatch && scoreMatch[1]) {
      const cvssScore = parseFloat(scoreMatch[1]); // Extract numeric value

      if (cvssScore >= 9.0) return "critical";
      if (cvssScore >= 7.0) return "high";
      if (cvssScore >= 4.0) return "medium";
      if (cvssScore >= 0) return "low";
    }

    return "unknown";
  };
  // Get severity class (for styling purposes)
  const getSeverityClass = (severity: unknown) => {
    const severityInfo = Array.isArray(severity) ? severity[0] : severity;

    if (severityInfo && severityInfo.type === "CVSS_V3") {
      return mapCvssToSeverity(severityInfo.score);
    }
    return "unknown";
  };

  // Get severity label (for display)
  const getSeverityLabel = (severity: unknown) => {
    if (!severity) return "Unknown";

    // If severity is an array, pick the first element or default to "Unknown"
    const severityInfo =
      Array.isArray(severity) && severity[0] ? severity[0] : severity;

    // Handle CVSS score or just a single severity value
    if (severityInfo && severityInfo.type === "CVSS_V3") {
      return mapCvssToSeverity(severityInfo.score); // Directly map and return severity
    }

    // If severity is just a string (e.g., "critical", "high", etc.), map it directly
    if (typeof severityInfo === "string") {
      return severityInfo.charAt(0).toUpperCase() + severityInfo.slice(1);
    }

    return "Unknown";
  };

  return {
    getSeverityClass,
    getSeverityLabel,
    vulnerabilityData: props.vulnerability,
  };
}
